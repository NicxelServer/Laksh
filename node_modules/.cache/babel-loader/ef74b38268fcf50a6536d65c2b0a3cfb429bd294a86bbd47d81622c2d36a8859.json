{"ast":null,"code":"import { upload } from \"@testing-library/user-event/dist/upload\";\nimport * as types from \"./solarpanel.actionTypes\";\nconst initialState = {\n  isLoading: false,\n  isError: false,\n  solarpanel: []\n};\nexport const solarpanelreducer = (state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case types.GET_solarpanel_LOADING:\n      {\n        return {\n          ...state,\n          isLoading: true\n        };\n      }\n    case types.GET_solarpanel_SUCCESS:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          solarpanel: payload\n        };\n      }\n    case types.GET_solarpanel_ERROR:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          isError: true\n        };\n      }\n    case types.ADD_solarpanel_LOADING:\n      {\n        return {\n          ...state,\n          isLoading: true\n        };\n      }\n    case types.ADD_solarpanelT_SUCCESS:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          solarpanel: [...state.solarpanel, payload]\n        };\n      }\n    case types.ADD_solarpanel_ERROR:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          isError: true\n        };\n      }\n    case types.UPDATE_solarpanel_LOADING:\n      {\n        return {\n          ...state,\n          isLoading: true\n        };\n      }\n    case types.UPDATE_solarpanel_SUCCESS:\n      {\n        let Updated = state.solarpanel.map(solarpanel => {\n          if (solarpanel.id == payload.id) {\n            return {\n              ...solarpanel,\n              payload\n            };\n          }\n          return solarpanel;\n        });\n        return {\n          ...state,\n          solarpanel: Updated\n        };\n      }\n    case types.UPDATE_solarpanel_ERROR:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          isError: true\n        };\n      }\n    case types.REMOVE_solarpanel_LOADING:\n      {\n        return {\n          ...state,\n          isLoading: true\n        };\n      }\n    case types.REMOVE_solarpanel_SUCCESS:\n      {\n        let removed = state.solarpanel.filter(solarpanel => solarpanel.id != payload);\n        return {\n          ...state,\n          solarpanel: removed\n        };\n      }\n    case types.REMOVE_solarpanel_ERROR:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          isError: true\n        };\n      }\n    case types.SORT_solarpanel:\n      {\n        if (payload == \"high\") {\n          let sorted = state.solarpanel.sort((a, b) => Number(a.price) - Number(b.price));\n          console.log(sorted);\n          return {\n            ...state,\n            solarpanel: [...sorted]\n          };\n        } else if (payload == \"low\") {\n          let sorted = state.solarpanel.sort((a, b) => Number(b.price) - Number(a.price));\n          console.log(sorted);\n          return {\n            ...state,\n            solarpanel: [...sorted]\n          };\n        }\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};","map":{"version":3,"names":["upload","types","initialState","isLoading","isError","solarpanel","solarpanelreducer","state","type","payload","GET_solarpanel_LOADING","GET_solarpanel_SUCCESS","GET_solarpanel_ERROR","ADD_solarpanel_LOADING","ADD_solarpanelT_SUCCESS","ADD_solarpanel_ERROR","UPDATE_solarpanel_LOADING","UPDATE_solarpanel_SUCCESS","Updated","map","id","UPDATE_solarpanel_ERROR","REMOVE_solarpanel_LOADING","REMOVE_solarpanel_SUCCESS","removed","filter","REMOVE_solarpanel_ERROR","SORT_solarpanel","sorted","sort","a","b","Number","price","console","log"],"sources":["C:/Laksh Master/Laksh/src/redux/solarpanel/solarpanel.reducer.js"],"sourcesContent":["import { upload } from \"@testing-library/user-event/dist/upload\";\r\nimport * as types from \"./solarpanel.actionTypes\";\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  isError: false,\r\n  solarpanel: [],\r\n};\r\n\r\nexport const solarpanelreducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case types.GET_solarpanel_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n    case types.GET_solarpanel_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        solarpanel: payload,\r\n      };\r\n    }\r\n    case types.GET_solarpanel_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    }\r\n    case types.ADD_solarpanel_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n\r\n    case types.ADD_solarpanelT_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        solarpanel: [...state.solarpanel, payload],\r\n      };\r\n    }\r\n\r\n    case types.ADD_solarpanel_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    }\r\n\r\n    case types.UPDATE_solarpanel_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n\r\n    case types.UPDATE_solarpanel_SUCCESS: {\r\n      let Updated = state.solarpanel.map((solarpanel) => {\r\n        if (solarpanel.id == payload.id) {\r\n          return { ...solarpanel, payload };\r\n        }\r\n        return solarpanel;\r\n      });\r\n      return {\r\n        ...state,\r\n        solarpanel: Updated,\r\n      };\r\n    }\r\n\r\n    case types.UPDATE_solarpanel_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    }\r\n\r\n    case types.REMOVE_solarpanel_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n\r\n    case types.REMOVE_solarpanel_SUCCESS: {\r\n      let removed = state.solarpanel.filter(\r\n        (solarpanel) => solarpanel.id != payload\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        solarpanel: removed,\r\n      };\r\n    }\r\n    case types.REMOVE_solarpanel_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    }\r\n    case types.SORT_solarpanel: {\r\n      if (payload == \"high\") {\r\n        let sorted = state.solarpanel.sort(\r\n          (a, b) => Number(a.price) - Number(b.price)\r\n        );\r\n        console.log(sorted);\r\n\r\n        return { ...state, solarpanel: [...sorted] };\r\n      } else if (payload == \"low\") {\r\n        let sorted = state.solarpanel.sort(\r\n          (a, b) => Number(b.price) - Number(a.price)\r\n        );\r\n        console.log(sorted);\r\n        return { ...state, solarpanel: [...sorted] };\r\n      }\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}