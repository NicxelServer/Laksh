{"ast":null,"code":"import { upload } from \"@testing-library/user-event/dist/upload\";\nimport * as types from \"./projector.actionTypes\";\nconst initialState = {\n  isLoading: false,\n  isError: false,\n  projector: []\n};\nexport const projectorreducer = (state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case types.GET_projector_LOADING:\n      {\n        return {\n          ...state,\n          isLoading: true\n        };\n      }\n    case types.GET_projector_SUCCESS:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          projector: payload\n        };\n      }\n    case types.GET_projector_ERROR:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          isError: true\n        };\n      }\n    case types.ADD_projector_LOADING:\n      {\n        return {\n          ...state,\n          isLoading: true\n        };\n      }\n    case types.ADD_projectorT_SUCCESS:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          projector: [...state.projector, payload]\n        };\n      }\n    case types.ADD_projector_ERROR:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          isError: true\n        };\n      }\n    case types.UPDATE_projector_LOADING:\n      {\n        return {\n          ...state,\n          isLoading: true\n        };\n      }\n    case types.UPDATE_projector_SUCCESS:\n      {\n        let Updated = state.projector.map(projector => {\n          if (projector.id == payload.id) {\n            return {\n              ...projector,\n              payload\n            };\n          }\n          return projector;\n        });\n        return {\n          ...state,\n          projector: Updated\n        };\n      }\n    case types.UPDATE_projector_ERROR:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          isError: true\n        };\n      }\n    case types.REMOVE_projector_LOADING:\n      {\n        return {\n          ...state,\n          isLoading: true\n        };\n      }\n    case types.REMOVE_projector_SUCCESS:\n      {\n        let removed = state.projector.filter(projector => projector.id != payload);\n        return {\n          ...state,\n          projector: removed\n        };\n      }\n    case types.REMOVE_projector_ERROR:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          isError: true\n        };\n      }\n    case types.SORT_projectorES:\n      {\n        if (payload == \"high\") {\n          let sorted = state.projector.sort((a, b) => Number(a.price) - Number(b.price));\n          return {\n            ...state,\n            projector: [...sorted]\n          };\n        } else if (payload == \"low\") {\n          let sorted = state.projector.sort((a, b) => Number(b.price) - Number(a.price));\n          return {\n            ...state,\n            projector: [...sorted]\n          };\n        }\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};","map":{"version":3,"names":["upload","types","initialState","isLoading","isError","projector","projectorreducer","state","type","payload","GET_projector_LOADING","GET_projector_SUCCESS","GET_projector_ERROR","ADD_projector_LOADING","ADD_projectorT_SUCCESS","ADD_projector_ERROR","UPDATE_projector_LOADING","UPDATE_projector_SUCCESS","Updated","map","id","UPDATE_projector_ERROR","REMOVE_projector_LOADING","REMOVE_projector_SUCCESS","removed","filter","REMOVE_projector_ERROR","SORT_projectorES","sorted","sort","a","b","Number","price"],"sources":["C:/Users/AbhijeetBhosale/Desktop/Lakshya_Test/nixmart/src/redux/projector/projector.reducer.js"],"sourcesContent":["import { upload } from \"@testing-library/user-event/dist/upload\";\r\nimport * as types from \"./projector.actionTypes\";\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  isError: false,\r\n  projector: [],\r\n};\r\n\r\nexport const projectorreducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case types.GET_projector_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n    case types.GET_projector_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        projector: payload,\r\n      };\r\n    }\r\n    case types.GET_projector_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    }\r\n    case types.ADD_projector_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n\r\n    case types.ADD_projectorT_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        projector: [...state.projector, payload],\r\n      };\r\n    }\r\n\r\n    case types.ADD_projector_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    }\r\n\r\n    case types.UPDATE_projector_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n\r\n    case types.UPDATE_projector_SUCCESS: {\r\n      let Updated = state.projector.map((projector) => {\r\n        if (projector.id == payload.id) {\r\n          return { ...projector, payload };\r\n        }\r\n        return projector;\r\n      });\r\n      return {\r\n        ...state,\r\n        projector: Updated,\r\n      };\r\n    }\r\n\r\n    case types.UPDATE_projector_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    }\r\n\r\n    case types.REMOVE_projector_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n\r\n    case types.REMOVE_projector_SUCCESS: {\r\n      let removed = state.projector.filter(\r\n        (projector) => projector.id != payload\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        projector: removed,\r\n      };\r\n    }\r\n    case types.REMOVE_projector_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    }\r\n    case types.SORT_projectorES: {\r\n      if (payload == \"high\") {\r\n        let sorted = state.projector.sort(\r\n          (a, b) => Number(a.price) - Number(b.price)\r\n        );\r\n\r\n        return { ...state, projector: [...sorted] };\r\n      } else if (payload == \"low\") {\r\n        let sorted = state.projector.sort(\r\n          (a, b) => Number(b.price) - Number(a.price)\r\n        );\r\n        return { ...state, projector: [...sorted] };\r\n      }\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}