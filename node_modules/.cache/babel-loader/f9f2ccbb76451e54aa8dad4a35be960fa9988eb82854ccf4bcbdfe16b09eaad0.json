{"ast":null,"code":"import { upload } from \"@testing-library/user-event/dist/upload\";\nimport * as types from \"./Cart.actionTypes\";\nconst initialState = {\n  isLoading: false,\n  isError: false,\n  Cart: []\n};\nexport const Cartreducer = (state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case types.GET_Cart_LOADING:\n      {\n        return {\n          ...state,\n          isLoading: true\n        };\n      }\n    case types.GET_Cart_SUCCESS:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          Cart: payload\n        };\n      }\n    case types.GET_Cart_ERROR:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          isError: true\n        };\n      }\n    case types.ADD_Cart_LOADING:\n      {\n        return {\n          ...state,\n          isLoading: true\n        };\n      }\n    case types.ADD_Cart_SUCCESS:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          Cart: [...state.Cart, payload]\n        };\n      }\n    case types.ADD_Cart_ERROR:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          isError: true\n        };\n      }\n    case types.REMOVE_Cart_LOADING:\n      {\n        return {\n          ...state,\n          isLoading: true\n        };\n      }\n    case types.REMOVE_Cart_SUCCESS:\n      {\n        let removed = state.Cart.filter(Cart => Cart.id != payload);\n        return {\n          ...state,\n          Cart: removed\n        };\n      }\n    case types.REMOVE_Cart_ERROR:\n      {\n        return {\n          ...state,\n          isLoading: false,\n          isError: true\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\n_c = Cartreducer;\nvar _c;\n$RefreshReg$(_c, \"Cartreducer\");","map":{"version":3,"names":["upload","types","initialState","isLoading","isError","Cart","Cartreducer","state","type","payload","GET_Cart_LOADING","GET_Cart_SUCCESS","GET_Cart_ERROR","ADD_Cart_LOADING","ADD_Cart_SUCCESS","ADD_Cart_ERROR","REMOVE_Cart_LOADING","REMOVE_Cart_SUCCESS","removed","filter","id","REMOVE_Cart_ERROR","_c","$RefreshReg$"],"sources":["C:/Users/AbhijeetBhosale/Desktop/Lakshya_Test/nixmart/src/redux/Carts/Cart.reducer.js"],"sourcesContent":["import { upload } from \"@testing-library/user-event/dist/upload\";\r\nimport * as types from \"./Cart.actionTypes\";\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  isError: false,\r\n  Cart: [],\r\n};\r\n\r\nexport const Cartreducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case types.GET_Cart_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n    case types.GET_Cart_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        Cart: payload,\r\n      };\r\n    }\r\n    case types.GET_Cart_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    }\r\n    case types.ADD_Cart_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n\r\n    case types.ADD_Cart_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        Cart: [...state.Cart, payload],\r\n      };\r\n    }\r\n\r\n    case types.ADD_Cart_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    }\r\n\r\n    case types.REMOVE_Cart_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    }\r\n\r\n    case types.REMOVE_Cart_SUCCESS: {\r\n      let removed = state.Cart.filter((Cart) => Cart.id != payload);\r\n\r\n      return {\r\n        ...state,\r\n        Cart: removed,\r\n      };\r\n    }\r\n    case types.REMOVE_Cart_ERROR: {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,yCAAyC;AAChE,OAAO,KAAKC,KAAK,MAAM,oBAAoB;AAE3C,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE,KAAK;EACdC,IAAI,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGL,YAAY,EAAE;EAAEM,IAAI;EAAEC;AAAQ,CAAC,KAAK;EACtE,QAAQD,IAAI;IACV,KAAKP,KAAK,CAACS,gBAAgB;MAAE;QAC3B,OAAO;UACL,GAAGH,KAAK;UACRJ,SAAS,EAAE;QACb,CAAC;MACH;IACA,KAAKF,KAAK,CAACU,gBAAgB;MAAE;QAC3B,OAAO;UACL,GAAGJ,KAAK;UACRJ,SAAS,EAAE,KAAK;UAChBE,IAAI,EAAEI;QACR,CAAC;MACH;IACA,KAAKR,KAAK,CAACW,cAAc;MAAE;QACzB,OAAO;UACL,GAAGL,KAAK;UACRJ,SAAS,EAAE,KAAK;UAChBC,OAAO,EAAE;QACX,CAAC;MACH;IACA,KAAKH,KAAK,CAACY,gBAAgB;MAAE;QAC3B,OAAO;UACL,GAAGN,KAAK;UACRJ,SAAS,EAAE;QACb,CAAC;MACH;IAEA,KAAKF,KAAK,CAACa,gBAAgB;MAAE;QAC3B,OAAO;UACL,GAAGP,KAAK;UACRJ,SAAS,EAAE,KAAK;UAChBE,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAI,EAAEI,OAAO;QAC/B,CAAC;MACH;IAEA,KAAKR,KAAK,CAACc,cAAc;MAAE;QACzB,OAAO;UACL,GAAGR,KAAK;UACRJ,SAAS,EAAE,KAAK;UAChBC,OAAO,EAAE;QACX,CAAC;MACH;IAEA,KAAKH,KAAK,CAACe,mBAAmB;MAAE;QAC9B,OAAO;UACL,GAAGT,KAAK;UACRJ,SAAS,EAAE;QACb,CAAC;MACH;IAEA,KAAKF,KAAK,CAACgB,mBAAmB;MAAE;QAC9B,IAAIC,OAAO,GAAGX,KAAK,CAACF,IAAI,CAACc,MAAM,CAAEd,IAAI,IAAKA,IAAI,CAACe,EAAE,IAAIX,OAAO,CAAC;QAE7D,OAAO;UACL,GAAGF,KAAK;UACRF,IAAI,EAAEa;QACR,CAAC;MACH;IACA,KAAKjB,KAAK,CAACoB,iBAAiB;MAAE;QAC5B,OAAO;UACL,GAAGd,KAAK;UACRJ,SAAS,EAAE,KAAK;UAChBC,OAAO,EAAE;QACX,CAAC;MACH;IAEA;MAAS;QACP,OAAOG,KAAK;MACd;EACF;AACF,CAAC;AAACe,EAAA,GAxEWhB,WAAW;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}